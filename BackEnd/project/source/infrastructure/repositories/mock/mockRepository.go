// Code generated by MockGen. DO NOT EDIT.
// Source: source/infrastructure/repositories/userRepository.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	entity "project/source/domain/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepository) CreateUser(user entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), user)
}

// FindUserByID mocks base method.
func (m *MockUserRepository) FindUserByID(userID int) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByID", userID)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByID indicates an expected call of FindUserByID.
func (mr *MockUserRepositoryMockRecorder) FindUserByID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByID", reflect.TypeOf((*MockUserRepository)(nil).FindUserByID), userID)
}

// FindUserID mocks base method.
func (m *MockUserRepository) FindUserID(user entity.User) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserID", user)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserID indicates an expected call of FindUserID.
func (mr *MockUserRepositoryMockRecorder) FindUserID(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserID", reflect.TypeOf((*MockUserRepository)(nil).FindUserID), user)
}

// FindUserPasswordRepo mocks base method.
func (m *MockUserRepository) FindUserPasswordRepo(user entity.User) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserPasswordRepo", user)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserPasswordRepo indicates an expected call of FindUserPasswordRepo.
func (mr *MockUserRepositoryMockRecorder) FindUserPasswordRepo(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserPasswordRepo", reflect.TypeOf((*MockUserRepository)(nil).FindUserPasswordRepo), user)
}

// SelectEventBySubIdsRepo mocks base method.
func (m *MockUserRepository) SelectEventBySubIdsRepo(subs []int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectEventBySubIdsRepo", subs)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectEventBySubIdsRepo indicates an expected call of SelectEventBySubIdsRepo.
func (mr *MockUserRepositoryMockRecorder) SelectEventBySubIdsRepo(subs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectEventBySubIdsRepo", reflect.TypeOf((*MockUserRepository)(nil).SelectEventBySubIdsRepo), subs)
}

// SelectEventsByIdRepo mocks base method.
func (m *MockUserRepository) SelectEventsByIdRepo(eventIds []string) ([]entity.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectEventsByIdRepo", eventIds)
	ret0, _ := ret[0].([]entity.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectEventsByIdRepo indicates an expected call of SelectEventsByIdRepo.
func (mr *MockUserRepositoryMockRecorder) SelectEventsByIdRepo(eventIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectEventsByIdRepo", reflect.TypeOf((*MockUserRepository)(nil).SelectEventsByIdRepo), eventIds)
}

// SelectEventsByUserIdRepo mocks base method.
func (m *MockUserRepository) SelectEventsByUserIdRepo(userId int) ([]entity.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectEventsByUserIdRepo", userId)
	ret0, _ := ret[0].([]entity.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectEventsByUserIdRepo indicates an expected call of SelectEventsByUserIdRepo.
func (mr *MockUserRepositoryMockRecorder) SelectEventsByUserIdRepo(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectEventsByUserIdRepo", reflect.TypeOf((*MockUserRepository)(nil).SelectEventsByUserIdRepo), userId)
}

// SelectUserSubscriptionRepo mocks base method.
func (m *MockUserRepository) SelectUserSubscriptionRepo(userId int) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserSubscriptionRepo", userId)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserSubscriptionRepo indicates an expected call of SelectUserSubscriptionRepo.
func (mr *MockUserRepositoryMockRecorder) SelectUserSubscriptionRepo(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserSubscriptionRepo", reflect.TypeOf((*MockUserRepository)(nil).SelectUserSubscriptionRepo), userId)
}
